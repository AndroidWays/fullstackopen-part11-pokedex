name: Pokedex CI/CD Pipeline with Health Monitoring

on:
    pull_request:
        types: [closed]
        branches: [main]
    schedule:
        - cron: '0 8 * * *' # Daily at 8:00 UTC
    workflow_dispatch:

env:
    APP_NAME: 'Pokedex'
    APP_URL: 'https://fullstackopen-part11-pokedex.onrender.com'
    HEALTH_ENDPOINT: '/health'
    VERSION_ENDPOINT: '/version'
    DISCORD_AVATAR: 'https://cdn-icons-png.flaticon.com/512/188/188987.png'

jobs:
    test:
        if: github.event_name == 'pull_request'
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci --audit=false
            - run: npx playwright install --with-deps
            - run: |
                  npm run lint || exit 1
                  npm run build || exit 1
                  npm test || exit 1
                  npm run test:e2e || exit 1

            - name: Debug build output
              run: |
                  echo "Build output contents:"
                  ls -R dist/

            - name: Upload production build
              if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
              uses: actions/upload-artifact@v4
              with:
                  name: production-build
                  path: dist/
                  retention-days: 1

    deploy:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: test
        runs-on: ubuntu-latest
        timeout-minutes: 10
        permissions:
            contents: write
        steps:
            - run: sudo apt-get install -y jq curl
            - uses: actions/download-artifact@v4
              with:
                  name: production-build
                  path: dist
            - name: Verify build files
              run: |
                  # Check for common index file patterns
                  if [ ! -f "dist/index.html" ] && [ ! -f "dist/index.htm" ]; then
                    echo "::error::No index file found in dist directory"
                    ls -R dist/
                    exit 1
                  fi

                  # Check for common JS file patterns
                  if [ ! -f "dist/main.js" ] && [ ! -f "dist/bundle.js" ] && [ ! -f "dist/app.js" ]; then
                    echo "::error::No main JavaScript file found in dist directory"
                    ls -R dist/
                    exit 1
                  fi

            - name: Trigger Render deployment
              id: deploy-step
              run: |
                  response=$(curl -s -X POST \
                    "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
                    -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                    -H "Content-Type: application/json" \
                    -w "\n%{http_code}")

                  http_code=$(echo "$response" | tail -n1)
                  body=$(echo "$response" | sed '$d')

                  if [ "$http_code" -ne 201 ]; then
                    echo "::error::Deployment failed with HTTP $http_code"
                    echo "$body" | jq .
                    exit 1
                  fi

                  deploy_id=$(echo "$body" | jq -r '.id')
                  echo "DEPLOY_ID=$deploy_id" >> $GITHUB_ENV
                  echo "deploy_id=$deploy_id" >> $GITHUB_OUTPUT
                  echo "::notice::✅ Deployment triggered! ID: $deploy_id"

    tag_release:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: [test, deploy]
        runs-on: ubuntu-latest
        timeout-minutes: 5
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.merge_commit_sha }}
                  fetch-depth: 0

            - name: Get version from package.json
              id: version
              run: |
                  version=$(jq -r .version package.json)
                  echo "new_tag=v$version" >> $GITHUB_OUTPUT
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Create Git tag
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"
                  git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
                  git push origin v${{ steps.version.outputs.version }}

    health_check:
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - name: Check application health
              id: health-check
              run: |
                  status_code=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }} || echo "500")
                  response_time=$(curl -s -o /dev/null -w "%{time_total}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }})
                  echo "status_code=$status_code" >> $GITHUB_OUTPUT
                  echo "response_time=$response_time" >> $GITHUB_OUTPUT
                  [ "$status_code" -eq 200 ] || exit 1

            - name: Get version info
              id: version-check
              run: |
                  version=$(curl -s ${{ env.APP_URL }}${{ env.VERSION_ENDPOINT }} | jq -r '.version // "unknown"' || echo "unknown")
                  echo "version=$version" >> $GITHUB_OUTPUT

    notify:
        needs:
            - test
            - deploy
            - tag_release
            - health_check
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Prepare notification data
              id: prepare
              run: |
                  echo "sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
                  echo "repo=$GITHUB_REPOSITORY" >> $GITHUB_OUTPUT
                  echo "run_url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
                  echo "event_type=${{ github.event_name }}" >> $GITHUB_OUTPUT
                  echo "deploy_id=${{ env.DEPLOY_ID || 'N/A' }}" >> $GITHUB_OUTPUT
                  echo "app_version=${{ steps.version.outputs.version || needs.health_check.outputs.version || 'unknown' }}" >> $GITHUB_OUTPUT

            - name: Send notification
              uses: actions/github-script@v6
              env:
                  WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
              with:
                  script: |
                      const isHealthCheck = '${{ steps.prepare.outputs.event_type }}' === 'schedule' || 
                                          '${{ steps.prepare.outputs.event_type }}' === 'workflow_dispatch';

                      if (isHealthCheck) {
                        const healthy = '${{ needs.health_check.result }}' === 'success';
                        await fetch(process.env.WEBHOOK_URL, {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            username: 'Pokedex Health Monitor',
                            avatar_url: process.env.DISCORD_AVATAR,
                            embeds: [{
                              title: healthy ? '✅ Pokedex Health Check Passed' : '❌ Pokedex Health Check Failed',
                              color: healthy ? 5763719 : 15548997,
                              fields: [
                                { name: 'Status', value: healthy ? 'Healthy' : 'Unhealthy', inline: true },
                                { name: 'Response Code', value: '${{ needs.health_check.outputs.status_code }}', inline: true },
                                { name: 'Response Time', value: `${'${{ needs.health_check.outputs.response_time }}'}s`, inline: true },
                                { name: 'Version', value: '${{ needs.health_check.outputs.version }}', inline: true },
                                { name: 'Trigger', value: '${{ steps.prepare.outputs.event_type }}' === 'workflow_dispatch' ? 'Manual' : 'Scheduled', inline: true },
                                { name: 'View App', value: `[Open Pokedex](${process.env.APP_URL})`, inline: false }
                              ],
                              timestamp: new Date().toISOString()
                            }]
                          })
                        });
                      } else {
                        const success = '${{ job.status }}' === 'success';
                        await fetch(process.env.WEBHOOK_URL, {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            username: 'Pokedex CI/CD',
                            avatar_url: process.env.DISCORD_AVATAR,
                            embeds: [{
                              title: success ? '✅ Pokedex Deployment Successful' : '❌ Pokedex Deployment Failed',
                              color: success ? 5763719 : 15548997,
                              fields: [
                                { name: 'Version', value: '${{ steps.prepare.outputs.app_version }}', inline: true },
                                { name: 'Deploy ID', value: '${{ steps.prepare.outputs.deploy_id }}', inline: true },
                                { name: 'Commit', value: `[${'${{ steps.prepare.outputs.sha }}'](https://github.com/${{ steps.prepare.outputs.repo }}/commit/${{ github.SHA }})`, inline: true },
                                { name: 'Triggered By', value: '${{ github.actor }}', inline: true },
                                { name: 'Details', value: `[View Workflow](${'${{ steps.prepare.outputs.run_url }}')`, inline: false },
                                ...('${{ job.status }}' !== 'success' ? [{
                                  name: 'Failed Step',
                                  value: '${{ needs.test.result || needs.deploy.result || needs.tag_release.result }}',
                                  inline: false
                                }] : [])
                              ],
                              timestamp: new Date().toISOString()
                            }]
                          })
                        });
                      }
