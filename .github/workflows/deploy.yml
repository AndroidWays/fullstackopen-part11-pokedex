name: Pokedex CI/CD Pipeline with Health Monitoring

on:
    push:
        branches: [main]
    pull_request:
        types: [opened, synchronize, closed]
    schedule:
        - cron: '0 8 * * *'
    workflow_dispatch:

env:
    APP_NAME: 'Pokedex'
    APP_URL: 'https://fullstackopen-part11-pokedex.onrender.com'
    HEALTH_ENDPOINT: '/health'
    VERSION_ENDPOINT: '/version'
    DISCORD_AVATAR: 'https://cdn-icons-png.flaticon.com/512/188/188987.png'

jobs:
    test:
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'
            - run: npm ci --audit=false
            - run: npx playwright install --with-deps
            - run: |
                  npm run lint
                  npm run build
                  npm test
                  npm run test:e2e
            - uses: actions/upload-artifact@v4
              if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip'))
              with:
                  name: production-build
                  path: dist/
                  retention-days: 1

    deploy:
        needs: test
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip'))
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - run: sudo apt-get install -y jq
            - uses: actions/download-artifact@v4
              with:
                  name: production-build
                  path: dist
            - name: Verify build files
              run: |
                  [ -f dist/index.html ] || { echo "::error::index.html missing!"; exit 1; }
                  [ -f dist/bundle.js ] || { echo "::error::bundle.js missing!"; exit 1; }
            - name: Deploy to Render
              run: |
                  DEPLOY_RESPONSE=$(curl -s -X POST \
                    "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
                    -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                    -H "Content-Type: application/json")
                  DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.id')
                  [ -n "$DEPLOY_ID" ] || { echo "::error::Deployment failed"; exit 1; }
                  echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
                  echo "::notice::✅ Deployment triggered! ID: $DEPLOY_ID"
              env:
                  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
                  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
            - name: Check deployed service
              uses: jtalk/url-health-check-action@v4
              with:
                  url: ${{ env.APP_URL }}
                  follow-redirect: false
                  max-attempts: 3
                  retry-delay: 5s
                  retry-all: false
            - name: Deployment outcome
              run: echo "Deployment step completed."
              if: always()

    tag_release:
        needs: [test, deploy]
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip'))
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Bump version and push tag
              uses: anothrNick/github-tag-action@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DEFAULT_BUMP: patch
                  WITH_V: true
            - name: Versioning outcome
              if: always()
              run: echo "Versioning step completed."

    health_check:
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        outputs:
            status_code: ${{ steps.health.outputs.status_code }}
            response_time: ${{ steps.health.outputs.response_time }}
            version: ${{ steps.version.outputs.version }}
        steps:
            - name: Check health
              id: health
              run: |
                  status_code=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }} || echo "500")
                  response_time=$(curl -s -o /dev/null -w "%{time_total}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }})
                  echo "status_code=$status_code" >> $GITHUB_OUTPUT
                  echo "response_time=$response_time" >> $GITHUB_OUTPUT
                  [ "$status_code" -eq 200 ] || exit 1
            - name: Get version
              id: version
              run: |
                  version=$(curl -s ${{ env.APP_URL }}${{ env.VERSION_ENDPOINT }} | jq -r '.version // "unknown"' || echo "unknown")
                  echo "version=$version" >> $GITHUB_OUTPUT

    notify:
        needs: [test, deploy, tag_release, health_check]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Set status emoji
              id: set-status
              run: |
                  function status_emoji() {
                    case "$1" in
                      success) echo "✅ success" ;;
                      failure) echo "❌ failure" ;;
                      cancelled) echo "⚠️ cancelled" ;;
                      *) echo "❓ $1" ;;
                    esac
                  }

                  echo "test_status=$(status_emoji '${{ needs.test.result }}')" >> $GITHUB_OUTPUT
                  echo "deploy_status=$(status_emoji '${{ needs.deploy.result }}')" >> $GITHUB_OUTPUT
                  echo "tag_status=$(status_emoji '${{ needs.tag_release.result }}')" >> $GITHUB_OUTPUT
                  echo "health_status=$(status_emoji '${{ needs.health_check.result }}')" >> $GITHUB_OUTPUT

            - name: Discord notification
              env:
                  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              uses: Ilshidur/action-discord@0c4b27844ba47cb1c7bee539c8eead5284ce9fa9
              with:
                  args: |
                      @simotoivanentivi23v0603

                      *${{ github.actor }}* triggered a ${{ github.event_name }} on **${{ github.repository }}**.

                      **Commit:** [View commit](<https://github.com/${{ github.repository }}/commit/${{ github.sha }}>)  

                      **Status:**
                      🔹 **Tests:** ${{ steps.set-status.outputs.test_status }}  
                      🔹 **Deployment:** ${{ steps.set-status.outputs.deploy_status }}  
                      🔹 **Version Tag:** ${{ steps.set-status.outputs.tag_status }}  
                      🔹 **Health Check:** ${{ steps.set-status.outputs.health_status }}
