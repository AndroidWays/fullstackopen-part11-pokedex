name: Pokedex CI/CD Pipeline with Health Monitoring

on:
    pull_request:
        types: [closed]
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install and test
              run: |
                  npm ci
                  npx playwright install --with-deps
                  npm run lint
                  npm run build
                  npm test
                  npm run test:e2e

            - name: Upload production build
              if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
              uses: actions/upload-artifact@v4
              with:
                  name: production-build
                  path: dist/

    deploy:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: test
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - run: sudo apt-get install -y jq
            - uses: actions/download-artifact@v4
              with:
                  name: production-build
                  path: dist

            - name: Verify build files
              run: |
                  [ -f dist/index.html ] || { echo "::error::index.html missing!"; exit 1; }
                  [ -f dist/bundle.js ] || { echo "::error::bundle.js missing!"; exit 1; }

            - name: Deploy to Render
              run: |
                  DEPLOY_RESPONSE=$(curl -s -X POST \
                    "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
                    -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                    -H "Content-Type: application/json")

                  DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.id')
                  [ -n "$DEPLOY_ID" ] || { echo "::error::Deployment failed"; exit 1; }
                  echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
                  echo "::notice::✅ Deployment triggered! ID: $DEPLOY_ID"
              env:
                  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
                  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

    tag_release:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: [test, deploy]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.merge_commit_sha }}
                  fetch-depth: '0'
            - name: Bump version
              id: version
              run: |
                  version=$(jq -r .version package.json)
                  echo "version=$version" >> $GITHUB_OUTPUT
            - name: Delete existing tag if exists
              run: |
                  git tag -d v${{ steps.version.outputs.version }} || true
                  git push --delete origin v${{ steps.version.outputs.version }} || true
            - name: Create Git tag
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"
                  git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
                  git push origin v${{ steps.version.outputs.version }}

    health_check:
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        timeout-minutes: 5
        outputs:
            status_code: ${{ steps.health-check.outputs.status_code }}
            response_time: ${{ steps.health-check.outputs.response_time }}
            version: ${{ steps.version-check.outputs.version }}
        steps:
            - name: Check application health
              id: health-check
              run: |
                  status_code=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }} || echo "500")
                  response_time=$(curl -s -o /dev/null -w "%{time_total}" ${{ env.APP_URL }}${{ env.HEALTH_ENDPOINT }})
                  echo "status_code=$status_code" >> $GITHUB_OUTPUT
                  echo "response_time=$response_time" >> $GITHUB_OUTPUT
                  [ "$status_code" -eq 200 ] || exit 1
            - name: Get version info
              id: version-check
              run: |
                  version=$(curl -s ${{ env.APP_URL }}${{ env.VERSION_ENDPOINT }} | jq -r '.version // "unknown"' || echo "unknown")
                  echo "version=$version" >> $GITHUB_OUTPUT

    notify:
        needs: [test, deploy, tag_release]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Prepare data
              id: prepare
              shell: bash
              run: |
                  echo "sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
                  echo "repo=$GITHUB_REPOSITORY" >> $GITHUB_OUTPUT
                  echo "run_url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
            - name: Set version fallback
              id: notify-version
              run: |
                  version="${{ needs.health_check.outputs.version }}"
                  echo "version=${version:-unknown}" >> $GITHUB_OUTPUT
            - name: Send notification
              uses: actions/github-script@v6
              env:
                  WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
              with:
                  script: |
                      const embed = {
                        title: '${{ job.status }}' === 'success' 
                          ? '✅ A new version of Pokedex Deployed' 
                          : '❌ Build/Deployment Failed',
                        color: '${{ job.status }}' === 'success' ? 65280 : 16711680,
                        fields: [
                          { name: 'Event', value: '${{ github.event_name }}', inline: true },
                          { name: 'Repo', value: '${{ github.repository }}', inline: true },
                          { name: 'Branch', value: '${{ steps.prepare.outputs.BRANCH }}', inline: true },
                          { name: 'Version', value: '${{ steps.version.outputs.new_tag || 'latest' }}', inline: true },
                          { name: 'Deploy ID', value: process.env.DEPLOY_ID || 'N/A', inline: true },
                          { name: 'Commit', value: `[${{ steps.prepare.outputs.SHORT_SHA }}](${{ steps.prepare.outputs.COMMIT_URL }})`, inline: false },
                          { name: 'Workflow', value: `[${{ github.workflow }}](${{ steps.prepare.outputs.WORKFLOW_URL }})`, inline: false }
                        ],
                        timestamp: new Date().toISOString()
                      };

                      if ('${{ job.status }}' !== 'success') {
                        embed.fields.push(
                          { name: 'Failed Job', value: '${{ needs.test.result || needs.deploy.result || needs.tag_release.result }}', inline: false }
                        );
                      }

                      await fetch(process.env.DISCORD_WEBHOOK, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                          username: 'Pokedex CI/CD',
                          avatar_url: 'https://cdn-icons-png.flaticon.com/512/188/188987.png',
                          embeds: [embed]
                        })
                      });
