name: CI/CD Deployment Pipeline

on:
    pull_request:
        types: [closed]
        branches: [main]

jobs:
    # Removed duplicate 'test' job definition
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install and test
              run: |
                  npm ci
                  npx playwright install --with-deps
                  npm run lint
                  npm run build
                  npm test
                  npm run test:e2e

            - name: Upload production build
              if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
              uses: actions/upload-artifact@v4
              with:
                  name: production-build
                  path: dist/

    deploy:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: test
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - run: sudo apt-get install -y jq
            - uses: actions/download-artifact@v4
              with:
                  name: production-build
                  path: dist

            - name: Verify build files
              run: |
                  [ -f dist/index.html ] || { echo "::error::index.html missing!"; exit 1; }
                  [ -f dist/bundle.js ] || { echo "::error::bundle.js missing!"; exit 1; }

            - name: Deploy to Render
              run: |
                  DEPLOY_RESPONSE=$(curl -s -X POST \
                    "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
                    -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                    -H "Content-Type: application/json")

                  DEPLOY_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.id')
                  [ -n "$DEPLOY_ID" ] || { echo "::error::Deployment failed"; exit 1; }
                  echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
                  echo "::notice::✅ Deployment triggered! ID: $DEPLOY_ID"
              env:
                  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
                  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

    tag_release:
        if: github.event.pull_request.merged == true && !contains(github.event.pull_request.title, '#skip')
        needs: [test, deploy]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.merge_commit_sha }}
                  fetch-depth: '0'
            - name: Bump version
              id: version
              uses: anothrNick/github-tag-action@8c8163ef62cf9c4677c8e800f36270af27930f42
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DEFAULT_BUMP: patch
                  WITH_V: false

    notify:
        needs: [test, deploy, tag_release]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Get commit details
              id: commit
              run: |
                  echo "event_name=$GITHUB_EVENT_NAME" >> $GITHUB_OUTPUT
                  echo "repo=$GITHUB_REPOSITORY" >> $GITHUB_OUTPUT
                  echo "ref=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
                  echo "workflow=$GITHUB_WORKFLOW" >> $GITHUB_OUTPUT
                  echo "actor=$GITHUB_ACTOR" >> $GITHUB_OUTPUT
                  echo "commit_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" >> $GITHUB_OUTPUT

                  # Get commit message (first line only)
                  COMMIT_MSG=$(git log --format=%B -n 1 $GITHUB_SHA | head -n 1)
                  echo "commit_msg=${COMMIT_MSG//$'\n'/' '}" >> $GITHUB_OUTPUT

            - name: Send Discord notification
              uses: actions/github-script@v6
              env:
                  DEPLOY_ID: ${{ env.DEPLOY_ID }}
                  NEW_TAG: ${{ steps.version.outputs.new_tag || 'latest' }}
                  JOB_RESULT: ${{ needs.test.result || needs.deploy.result || needs.tag_release.result }}
              with:
                  script: |
                      const webhookUrl = '${{ secrets.DISCORD_WEBHOOK }}';
                      const status = '${{ job.status }}';

                      const embed = {
                        title: status === 'success' ? 'A new version of Pokedex Deployed' : 'Build/Deployment Failed',
                        color: status === 'success' ? 65280 : 16711680,
                        fields: [
                          {
                            name: 'Version',
                            value: process.env.NEW_TAG,
                            inline: true
                          },
                          {
                            name: 'Status',
                            value: status === 'success' ? '✅ Success' : '❌ Failed',
                            inline: true
                          },
                          {
                            name: 'Deploy ID',
                            value: process.env.DEPLOY_ID || 'N/A',
                            inline: true
                          },
                          {
                            name: 'Commit',
                            value: '[${'${{ github.sha }}'.substring(0,7)}](${{ steps.commit.outputs.commit_url }})',
                            inline: true
                          },
                          {
                            name: 'Message',
                            value: '${{ steps.commit.outputs.commit_msg }}',
                            inline: true
                          },
                          {
                            name: 'By',
                            value: '${{ steps.commit.outputs.actor }}',
                            inline: true
                          }
                        ],
                        timestamp: new Date().toISOString()
                      };

                      if (status !== 'success') {
                        embed.fields.push({
                          name: 'Failed Job',
                          value: process.env.JOB_RESULT,
                          inline: false
                        });
                        embed.fields.push({
                          name: 'Logs',
                          value: `[View Logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)`,
                          inline: false
                        });
                      }

                      await fetch(webhookUrl, {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          username: 'Pokedex CI/CD',
                          avatar_url: 'https://cdn-icons-png.flaticon.com/512/188/188987.png',
                          embeds: [embed]
                        })
                      });
